<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Internship.API/Program.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Internship.API/Program.cs" />
              <option name="originalContent" value="using Asp.Versioning;&#10;using Internship.API.Endpoints;&#10;using Internship.Application.Authors.Services;&#10;using Internship.Application.Comments.Services;&#10;using Internship.Application.Posts.Services;&#10;using Internship.Application.Tags.Services;&#10;using Internship.Domain.Authors;&#10;using Internship.Domain.Comments;&#10;using Internship.Domain.Posts;&#10;using Internship.Domain.Tags;&#10;using Internship.Infrastructure;&#10;using Internship.Infrastructure.Repositories;&#10;using Microsoft.EntityFrameworkCore;&#10;&#10;namespace Internship.API;&#10;&#10;public class Program&#10;{&#10;    public static void Main(string[] args)&#10;    {&#10;        var builder = WebApplication.CreateBuilder(args);&#10;&#10;        builder.Services.AddAuthorization();&#10;&#10;        builder.Services.AddOpenApi();&#10;&#10;        // Configure CORS&#10;        builder.Services.AddCors(options =&gt;&#10;        {&#10;            options.AddPolicy(&quot;BlazorAppPolicy&quot;, policy =&gt;&#10;            {&#10;                policy.AllowAnyOrigin()&#10;                    .AllowAnyMethod()&#10;                    .AllowAnyHeader();&#10;            });&#10;        });&#10;&#10;        // Add API versioning&#10;        builder.Services.AddApiVersioning(options =&gt;&#10;        {&#10;            options.DefaultApiVersion = new ApiVersion(1, 0);&#10;            options.AssumeDefaultVersionWhenUnspecified = true;&#10;            options.ReportApiVersions = true;&#10;        }).AddApiExplorer(options =&gt;&#10;        {&#10;            options.GroupNameFormat = &quot;'v'VVV&quot;;&#10;            options.SubstituteApiVersionInUrl = true;&#10;        });&#10;&#10;        builder.Services.AddEndpointsApiExplorer();&#10;        builder.Services.AddSwaggerGen(c =&gt;&#10;        {&#10;            c.SwaggerDoc(&quot;v1&quot;, new()&#10;            {&#10;                Title = &quot;Invoice Management API&quot;,&#10;                Version = &quot;v1&quot;,&#10;                Description = &quot;API for managing posts, comments,and authors&quot;&#10;            });&#10;        });&#10;&#10;        // Register DbContext&#10;        builder.Services.AddDbContext&lt;InternContext&gt;(options =&gt;&#10;            options.UseSqlServer(builder.Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));&#10;&#10;        // Register repositories&#10;        builder.Services.AddScoped&lt;IPostRepository, PostRepository&gt;();&#10;        builder.Services.AddScoped&lt;ICommentRepository, CommentRepository&gt;();&#10;        builder.Services.AddScoped&lt;IAuthorRepository, AuthorRepository&gt;();&#10;        builder.Services.AddScoped&lt;ITagRepository, TagRepository&gt;();&#10;&#10;        // Register application services&#10;        builder.Services.AddScoped&lt;PostApplicationService&gt;();&#10;        builder.Services.AddScoped&lt;CommentApplicationService&gt;();&#10;        builder.Services.AddScoped&lt;AuthorApplicationService&gt;();&#10;        builder.Services.AddScoped&lt;TagApplicationService&gt;();&#10;&#10;        var app = builder.Build();&#10;&#10;        if (app.Environment.IsDevelopment())&#10;        {&#10;            app.UseSwagger();&#10;            app.UseSwaggerUI(c =&gt;&#10;            {&#10;                c.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;Invoice Management API v1&quot;);&#10;                c.RoutePrefix = string.Empty; // Set Swagger UI at the app's root&#10;            });&#10;        }&#10;&#10;        app.UseHttpsRedirection();&#10;&#10;        app.UseAuthorization();&#10;        app.UseCors(&quot;BlazorAppPolicy&quot;);&#10;        // Map endpoints&#10;        app.MapPostsEndpoints();&#10;        app.MapCommentsEndpoints();&#10;        app.MapAuthorsEndpoints();&#10;        app.MapTagsEndpoints();&#10;&#10;        app.Run();&#10;    }&#10;}" />
              <option name="updatedContent" value="using Asp.Versioning;&#10;using Internship.API.Endpoints;&#10;using Internship.Application.Authors.Services;&#10;using Internship.Application.Comments.Services;&#10;using Internship.Application.Posts.Services;&#10;using Internship.Application.Tags.Services;&#10;using Internship.Domain.Authors;&#10;using Internship.Domain.Comments;&#10;using Internship.Domain.Posts;&#10;using Internship.Domain.Tags;&#10;using Internship.Infrastructure;&#10;using Internship.Infrastructure.Repositories;&#10;using Microsoft.EntityFrameworkCore;&#10;&#10;namespace Internship.API;&#10;&#10;public class Program&#10;{&#10;    public static void Main(string[] args)&#10;    {&#10;        var builder = WebApplication.CreateBuilder(args);&#10;&#10;        builder.Services.AddAuthorization();&#10;&#10;        builder.Services.AddOpenApi();&#10;&#10;        // Configure CORS&#10;        builder.Services.AddCors(options =&gt;&#10;        {&#10;            options.AddPolicy(&quot;BlazorAppPolicy&quot;, policy =&gt;&#10;            {&#10;                policy.AllowAnyOrigin()&#10;                    .AllowAnyMethod()&#10;                    .AllowAnyHeader();&#10;            });&#10;        });&#10;&#10;        // Add API versioning&#10;        builder.Services.AddApiVersioning(options =&gt;&#10;        {&#10;            options.DefaultApiVersion = new ApiVersion(1, 0);&#10;            options.AssumeDefaultVersionWhenUnspecified = true;&#10;            options.ReportApiVersions = true;&#10;        }).AddApiExplorer(options =&gt;&#10;        {&#10;            options.GroupNameFormat = &quot;'v'VVV&quot;;&#10;            options.SubstituteApiVersionInUrl = true;&#10;        });&#10;&#10;        builder.Services.AddEndpointsApiExplorer();&#10;        builder.Services.AddSwaggerGen(c =&gt;&#10;        {&#10;            c.SwaggerDoc(&quot;v1&quot;, new()&#10;            {&#10;                Title = &quot;Invoice Management API&quot;,&#10;                Version = &quot;v1&quot;,&#10;                Description = &quot;API for managing posts, comments,and authors&quot;&#10;            });&#10;        });&#10;&#10;        // Register DbContext&#10;        builder.Services.AddDbContext&lt;InternContext&gt;(options =&gt;&#10;            options.UseSqlServer(builder.Configuration.GetConnectionString(&quot;DefaultConnection&quot;), &#10;                b =&gt; b.MigrationsAssembly(&quot;Internship.Infrastructure&quot;)));&#10;&#10;        // Register repositories&#10;        builder.Services.AddScoped&lt;IPostRepository, PostRepository&gt;();&#10;        builder.Services.AddScoped&lt;ICommentRepository, CommentRepository&gt;();&#10;        builder.Services.AddScoped&lt;IAuthorRepository, AuthorRepository&gt;();&#10;        builder.Services.AddScoped&lt;ITagRepository, TagRepository&gt;();&#10;&#10;        // Register application services&#10;        builder.Services.AddScoped&lt;PostApplicationService&gt;();&#10;        builder.Services.AddScoped&lt;CommentApplicationService&gt;();&#10;        builder.Services.AddScoped&lt;AuthorApplicationService&gt;();&#10;        builder.Services.AddScoped&lt;TagApplicationService&gt;();&#10;&#10;        var app = builder.Build();&#10;&#10;        if (app.Environment.IsDevelopment())&#10;        {&#10;            app.UseSwagger();&#10;            app.UseSwaggerUI(c =&gt;&#10;            {&#10;                c.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;Invoice Management API v1&quot;);&#10;                c.RoutePrefix = string.Empty; // Set Swagger UI at the app's root&#10;            });&#10;        }&#10;&#10;        app.UseHttpsRedirection();&#10;&#10;        app.UseAuthorization();&#10;        app.UseCors(&quot;BlazorAppPolicy&quot;);&#10;        // Map endpoints&#10;        app.MapPostsEndpoints();&#10;        app.MapCommentsEndpoints();&#10;        app.MapAuthorsEndpoints();&#10;        app.MapTagsEndpoints();&#10;&#10;        app.Run();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Internship.Blazor/Components/SmcGrid/Components/ToolbarMenus/SmcToolbarMenuItem.razor">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Internship.Blazor/Components/SmcGrid/Components/ToolbarMenus/SmcToolbarMenuItem.razor" />
              <option name="originalContent" value="@using Microsoft.AspNetCore.Components&#10;&#10;&lt;a href=&quot;#&quot; @onclick=&quot;HandleClick&quot; @onclick:preventDefault=&quot;true&quot;&#10;   class=&quot;@(IsDisabled ? &quot;disabled&quot; : &quot;&quot;)&quot; title=&quot;@Title&quot;&gt;&#10;    &lt;i class=&quot;@IconClass&quot;&gt;&lt;/i&gt; @Title&#10;&lt;/a&gt;&#10;&#10;@code {&#10;    [Parameter] public string Title { get; set; }&#10;    [Parameter] public string IconClass { get; set; }&#10;    [Parameter] public bool IsDisabled { get; set; }&#10;    [Parameter] public EventCallback OnClick { get; set; }&#10;    [Parameter] public string NavigationPath { get; set; }&#10;    &#10;    private async Task HandleClick()&#10;    {&#10;        if (!IsDisabled &amp;&amp; OnClick.HasDelegate)&#10;        {&#10;            await OnClick.InvokeAsync();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="@using Microsoft.AspNetCore.Components&#10;&#10;@if (!IsDisabled)&#10;{&#10;    &lt;button type=&quot;button&quot; class=&quot;smc-toolbar-menu-item&quot; @onclick=&quot;OnClick&quot;&gt;&#10;        &lt;i class=&quot;@IconClass&quot;&gt;&lt;/i&gt;&#10;        &lt;span&gt;@Title&lt;/span&gt;&#10;    &lt;/button&gt;&#10;}&#10;else&#10;{&#10;    &lt;button type=&quot;button&quot; class=&quot;smc-toolbar-menu-item disabled&quot; disabled&gt;&#10;        &lt;i class=&quot;@IconClass&quot;&gt;&lt;/i&gt;&#10;        &lt;span&gt;@Title&lt;/span&gt;&#10;    &lt;/button&gt;&#10;}&#10;&#10;@code {&#10;    [Parameter] public string Title { get; set; } = string.Empty;&#10;    [Parameter] public string IconClass { get; set; } = string.Empty;&#10;    [Parameter] public bool IsDisabled { get; set; }&#10;    [Parameter] public EventCallback OnClick { get; set; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Internship.Domain/Authors/AuthorRole.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Internship.Domain/Authors/AuthorRole.cs" />
              <option name="updatedContent" value="namespace Internship.Domain.Authors;&#10;&#10;public enum AuthorRole&#10;{&#10;    Reader,&#10;    Contributor,&#10;    Editor,&#10;    Admin,&#10;    SuperAdmin&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Internship.Domain/Comments/CommentStatus.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Internship.Domain/Comments/CommentStatus.cs" />
              <option name="updatedContent" value="namespace Internship.Domain.Comments;&#10;&#10;public enum CommentStatus&#10;{&#10;    Pending,&#10;    Approved,&#10;    Rejected,&#10;    Spam&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Internship.Domain/Common/Entity.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Internship.Domain/Common/Entity.cs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Internship.Domain/Common/IDomainEvent.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Internship.Domain/Common/IDomainEvent.cs" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>